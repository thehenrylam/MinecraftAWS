---
# Fetch variables in order of execution

### Template: Foundation layer
- name: Fetch output (foundation)
  command: 
    # We expect a json output (in string form)
    cmd: "tofu output -json foundation_output"
    chdir: "{{ directory.terraform }}/foundation/"
  register: raw_output_TF_foundation
  ignore_errors: true

# Only execute if the command above is 0
- name: Parse JSON output (foundation)
  set_fact: 
    TF_foundation: "{{ raw_output_TF_foundation.stdout | to_json | from_json }}"
  when: (raw_output_TF_foundation.rc == 0)


### Template: Packer AMIs
- name: Fetch output (packer - jenkins)
  command:
    cmd: "cat {{ output.packer.jenkins }}"
    chdir: "{{ directory.packer }}"
  register: raw_output_PK_jenkins
  ignore_errors: true

# Execute if the command failed (This is needed because we needed to perform a lot of parsing to a point where default(...) statement can't cover that failure)
- name: Parse JSON output (packer - jenkins) (DEFAULT)
  set_fact:
    PK_jenkins: {"builds": [{"artifact_id": "0:UNDEFINED"}]}
  when: raw_output_PK_jenkins.rc != 0
# Only execute if the command above is 0
- name: Parse JSON output (packer - jenkins) 
  set_fact:
    PK_jenkins: "{{ raw_output_PK_jenkins.stdout | to_json | from_json }}"
  when: (raw_output_PK_jenkins.rc == 0)


### Aggregate results from all outputs (to be used to template the variable file)
- name: Aggregate results from all outputs
  set_fact:
    user_input:
      jenkins:
        iam_instance_profile: "{{ TF_foundation.instance_profile | default('UNDEFINED') }}"
        ami_id: "{{ PK_jenkins.builds[-1].artifact_id.split(':')[1] | default('UNDEFINED') }}"

- name: Template variable file
  template:
    src: "{{ configuration.on_runtime.varfile }}.j2"
    dest: "{{ configuration.on_runtime.varfile }}"

