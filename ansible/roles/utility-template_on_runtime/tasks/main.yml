---
# Fetch variables in order of execution

### Template: Foundation layer
- name: Check if output exists (foundation)
  stat:
    path: "{{ directory.terraform }}/foundation/"
  register: foundation_output_status

- name: Fetch output (foundation)
  command: 
    # We expect a json output (in string form)
    cmd: "tofu output -json foundation_output"
    chdir: "{{ directory.terraform }}/foundation/"
  register: raw_output_TF_foundation
  when: foundation_output_status.stat.exists == true

- name: Parse JSON output (foundation)
  set_fact: 
    TF_foundation: "{{ raw_output_TF_foundation.stdout | to_json | from_json }}"
  when: foundation_output_status.stat.exists == true



### Template: Packer AMIs
- name: Check if output exists (packer - jenkins)
  stat:
    path: "{{ output.packer.jenkins }}"
  register: jenkins_output_status

- name: Fetch output (packer - jenkins)
  command:
    cmd: "cat {{ output.packer.jenkins }}"
    chdir: "{{ directory.packer }}"
  register: raw_output_PK_jenkins
  when: jenkins_output_status.stat.exists == true

- name: Parse JSON output (packer - jenkins)
  set_fact:
    PK_jenkins: "{{ raw_output_PK_jenkins.stdout | to_json | from_json }}"
  when: jenkins_output_status.stat.exists == true


### Aggregate results from all outputs (to be used to template the variable file)
- name: Aggregate results from all outputs
  set_fact:
    user_input:
      jenkins:
        iam_instance_profile: "{{ TF_foundation.instance_profile | default('UNDEFINED') }}"
        ami_id: "{{ PK_jenkins.builds[-1].artifact_id.split(':')[1] | default('UNDEFINED') }}"

- name: Template variable file
  template:
    src: "{{ configuration.on_runtime.varfile }}.j2"
    dest: "{{ configuration.on_runtime.varfile }}"

